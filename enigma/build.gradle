configurations {
    proGuard
}

dependencies {
    implementation libs.bundles.asm

    implementation libs.quiltflower
    implementation libs.cfr
    implementation libs.procyon

    proGuard libs.proguard

    testImplementation libs.jimfs
}

// Generate "version.txt" file

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionFile {
    ext.outputFile = file("$genOutputDir/version.properties")
    inputs.property("version", project.version)
    inputs.property("quiltflower-version", libs.quiltflower.get().versionConstraint.displayName)
    inputs.property("cfr-version", libs.cfr.get().versionConstraint.displayName)
    inputs.property("procyon-version", libs.procyon.get().versionConstraint.displayName)

    outputs.file(outputFile)
    doLast {
        outputFile.text = inputs.properties.entrySet()
                .collect { "$it.key = $it.value" }.join("\n")
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionFile

// Generate obfuscated JARs for tests

def libraryJarsArg = "<java.home>/jmods"

// If your test fails for class file version problem with proguard, run gradle with -Dorg.gradle.java.home="<older jdk>" flag
file('src/test/java/cuchaz/enigma/inputs').listFiles().each { theFile ->
    if (theFile.directory) {
        task("${theFile.name}TestJar", type: Jar) {
            from(sourceSets.test.output) {
                include "cuchaz/enigma/inputs/$theFile.name/**/*.class"
                include 'cuchaz/enigma/inputs/Keep.class'
            }

            archiveFileName = theFile.name + '.jar'
            destinationDirectory = file('build/test-inputs')
        }

        task("${theFile.name}TestObf", type: JavaExec,
                dependsOn: "${theFile.name}TestJar") {
            mainClass = 'proguard.ProGuard'
            classpath configurations.proGuard

            args '@src/test/resources/proguard-test.conf', '-injars', file('build/test-inputs/' +
                    "${theFile.name}.jar"), '-libraryjars', libraryJarsArg,
                    '-outjars', file('build/test-obf/' + "${theFile.name}.jar")
        }

        test.dependsOn "${theFile.name}TestObf"
    }
}

test.dependsOn 'translationTestObf'

publishing {
    publications {
        "$project.name"(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
        }
    }
}
